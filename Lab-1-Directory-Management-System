
#include <iostream>
#include <string>
#include <direct.h>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;

// Function to display the main menu
void mainMenu() {
    cout << "[1] List Files\n";
    cout << "[2] Create Directory\n";
    cout << "[3] Change Directory\n";
    cout << "[4] Exit\n";
    cout << "Enter option: ";
}

// Function to display the list files submenu
void listFilesMenu() {
    cout << "[1] List All Files\n";
    cout << "[2] List Files by Extension (e.g., .txt)\n";
    cout << "[3] List Files by Pattern (e.g., moha*.*)\n";
    cout << "Enter choice: ";
}

// Function to list files based on user selection
void listFiles() {
    int listFilesChoice;
    listFilesMenu();
    while (!(cin >> listFilesChoice)) {
        cout << "Invalid input. Enter a number: ";
        cin.clear();
        cin.ignore(1000, '\n');
    }
    cin.ignore();

    try {
        switch (listFilesChoice) {
            case 1: {
                cout << "\nFiles in current directory:\n";
                for (const auto& entry : fs::directory_iterator(fs::current_path())) {
                    cout << "- " << entry.path().filename().string() << endl;
                }
                break;
            }
            case 2: {
                string fileExtension;
                cout << "Enter file extension (include the dot, e.g., .txt): ";
                getline(cin, fileExtension);
                cout << "\nListing files with extension " << fileExtension << ":\n";
                bool filesFound = false;
                for (const auto& entry : fs::directory_iterator(fs::current_path())) {
                    if (entry.path().extension() == fileExtension) {
                        cout << entry.path().filename().string() << endl;
                        filesFound = true;
                    }
                }
                if (!filesFound) {
                    cout << "No files found with extension " << fileExtension << "!\n";
                }
                break;
            }
            case 3: {
                string filePattern;
                cout << "Enter file pattern (e.g., moha*.*): ";
                getline(cin, filePattern);
                cout << "\nListing files matching pattern " << filePattern << ":\n";
                bool patternFound = false;
                size_t starPos = filePattern.find('*');
                string filePrefix = (starPos != string::npos) ? filePattern.substr(0, starPos) : filePattern;
                for (const auto& entry : fs::directory_iterator(fs::current_path())) {
                    string filename = entry.path().filename().string();
                    if (filename.rfind(filePrefix, 0) == 0) {
                        cout << filename << endl;
                        patternFound = true;
                    }
                }
                if (!patternFound) {
                    cout << "No files found matching pattern " << filePattern << "!\n";
                }
                break;
            }
            default:
                cout << "Invalid choice!\n";
        }
    } catch (const fs::filesystem_error& e) {
        cerr << "Filesystem error: " << e.what() << endl;
    }
}

// Function to create a new directory
void createDirectory() {
    fs::path newDirectoryPath;
    cout << "\nEnter new directory name: ";
    cin >> newDirectoryPath;

    if (fs::exists(newDirectoryPath)) {
        cout << "Error: Directory \"" << newDirectoryPath << "\" already exists!\n";
    } else {
        try {
            if (fs::create_directory(newDirectoryPath)) {
                cout << "Directory \"" << newDirectoryPath << "\" created successfully.\n";
            } else {
                cout << "Error: Failed to create directory \"" << newDirectoryPath << "\"!\n";
            }
        } catch (const fs::filesystem_error& e) {
            cerr << "Filesystem error: " << e.what() << endl;
        }
    }
    cin.ignore();
}

// Function to display the change directory submenu
void changeDirectoryMenu() {
    cout << "\nChange Directory Menu\n";
    cout << "[1] Move to Parent Directory\n";
    cout << "[2] Move to Root Directory\n";
    cout << "[3] Enter Custom Path (e.g., C:\\Users\\Documents)\n";
    cout << "Enter choice: ";
}

// Function to change the current working directory
void changeDirectory() {
    int changeDirChoice;
    changeDirectoryMenu();
    while (!(cin >> changeDirChoice)) {
        cout << "Invalid input. Enter a number: ";
        cin.clear();
        cin.ignore(1000, '\n');
    }
    cin.ignore();

    try {
        switch (changeDirChoice) {
            case 1: {
                fs::path currentPath = fs::current_path();
                fs::path parentPath = currentPath.parent_path();
                if (parentPath != currentPath) {
                    fs::current_path(parentPath);
                    cout << "Changed to parent directory: " << fs::current_path().string() << endl;
                } else {
                    cout << "Error: Already at root or no parent directory exists!\n";
                }
                break;
            }
            case 2: {
                fs::current_path(fs::current_path().root_path());
                cout << "Changed to root directory: " << fs::current_path().string() << endl;
                break;
            }
            case 3: {
                fs::path customPath;
                cout << "Enter new directory path (e.g., C:\\Users\\Documents): ";
                cin >> customPath;
                if (fs::exists(customPath) && fs::is_directory(customPath)) {
                    fs::current_path(customPath);
                    cout << "Changed to directory: " << fs::current_path().string() << endl;
                } else {
                    cout << "Error: Directory \"" << customPath << "\" not found!\n";
                }
                cin.ignore();
                break;
            }
            default:
                cout << "Invalid choice!\n";
        }
    } catch (const fs::filesystem_error& e) {
        cerr << "Filesystem error: " << e.what() << endl;
    }
}

// Function to handle the main menu and user interaction
void mainMenuLoop() {
    int mainMenuChoice;
    do {
        mainMenu();
        while (!(cin >> mainMenuChoice)) {
            cout << "Invalid input. Enter a number: ";
            cin.clear();
            cin.ignore(1000, '\n');
        }
        cin.ignore();
        switch (mainMenuChoice) {
            case 1:
                listFiles();
                break;
            case 2:
                createDirectory();
                break;
            case 3:
                changeDirectory();
                break;
            case 4:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid option. Please try again.\n";
        }
    } while (mainMenuChoice != 4);
}

int main() {
    mainMenuLoop();
    return 0;
}
